GRAYSCALE SOLVED:


    for (int i = 0; i < height; i++)
    {
        for (int j = 0; j < width; j++)
        {
            int average = round((image[i][j].rgbtBlue + image[i][j].rgbtGreen + image[i][j].rgbtRed) / 3.0);
            image[i][j].rgbtBlue = average;
            image[i][j].rgbtGreen = average;
            image[i][j].rgbtRed = average;
        }
    }
    return;





rough plan for Grayscale

    for i-> height
    {
        for int -> width
        {
            average = (image[i][j].blue + image[i][j].green + image[i][j].red) / 3
            image[i][j].blue = average
            image[i][j].green = average
            image[i][j].red = average
            return image
        }
    }

roughplan for blur

    for i-> height
    {
        for int j -> width
        {
            average = image[i][j] + image[i][j-1] + image[i][j+1] +  image[i][j-1] + image[i][j+1] +   etcetcetc

            image[i].blue = average
            image[i].green = average
            image[i].red = average
            return image
        }
    }

make this work first, then try reflect and edge
what about edge cases?

if i-1 = 0



roughplan for reflect

    for pixel i -> width
    {
        pixel[i] = pixel[width-i]
    }


roughplan for edges

    carry out same as blue, but with very particularly annoying algorithm