
rough plans for each function

bool load (
    loads all the words in the text into a hash table 
    
    open dictionary file 'r'
        fopen 'r', check if null 
    read strings one word at a time w for loop
        fscanf(filepointer, "%s", word) (maybe use a while loop until it returns EOF)
    create a new node for each word
        node *n = malloc(sizeof(node));
        strcpy(n -> word, "%s", word);
        n -> next = NULL
    run the hash function to know where to store the word
        run hash function on that word
        get back an index into array
        n -> next = pointertoarraysfirstelement
        then change the pointer to array to n
    insert node into hash table in that bucket

    returns true if loaded correctly 
    
    
hash (const char *word) 
    takes a word and runs a hash function on it to return a number corresponding to which bucket (linkedlist) to place that element into
    
    input: word, with alphabetical characters capitalised or not, maybe apostrophes
    output: numerical index between 0 and buckets-1

    
size
    returns how many words in the dictionary
    either do this manually and count
    or do this step while youre inserting into the hash table to save time
    
check
    takes a word and checks if it is in the dictionary
    
    input: const char *word
    output: bool if the word is in the dictionary or not, case insensitive
    
    steps:
        hash an input word to get hash value
        access linked list at that hash value 
        iterate through linked list to strcasecmp() that word
        
    iterating through linked list:
    create cursor variable pointing at first node 
        check if that node's word is the correct one 
    if not, cursor becomes that node's next 
    *cursor = table[x]
    if cursor -> word = targetword, TRUE
    else; cursor = cursor -> next;
    if cursor = NULL, return FALSE

unload
    frees all memory taken up so far 
    
    calls free on all memory mallocd
    
    *cursor = table[x]
    *temp = cursor
    cursor = cursor -> next
    free(tmp)
    if cursor = NULL, done
    repeat for all of table[]











